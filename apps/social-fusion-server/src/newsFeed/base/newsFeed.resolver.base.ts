/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NewsFeed } from "./NewsFeed";
import { NewsFeedCountArgs } from "./NewsFeedCountArgs";
import { NewsFeedFindManyArgs } from "./NewsFeedFindManyArgs";
import { NewsFeedFindUniqueArgs } from "./NewsFeedFindUniqueArgs";
import { CreateNewsFeedArgs } from "./CreateNewsFeedArgs";
import { UpdateNewsFeedArgs } from "./UpdateNewsFeedArgs";
import { DeleteNewsFeedArgs } from "./DeleteNewsFeedArgs";
import { NewsFeedService } from "../newsFeed.service";
@graphql.Resolver(() => NewsFeed)
export class NewsFeedResolverBase {
  constructor(protected readonly service: NewsFeedService) {}

  async _newsFeedsMeta(
    @graphql.Args() args: NewsFeedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NewsFeed])
  async newsFeeds(
    @graphql.Args() args: NewsFeedFindManyArgs
  ): Promise<NewsFeed[]> {
    return this.service.newsFeeds(args);
  }

  @graphql.Query(() => NewsFeed, { nullable: true })
  async newsFeed(
    @graphql.Args() args: NewsFeedFindUniqueArgs
  ): Promise<NewsFeed | null> {
    const result = await this.service.newsFeed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewsFeed)
  async createNewsFeed(
    @graphql.Args() args: CreateNewsFeedArgs
  ): Promise<NewsFeed> {
    return await this.service.createNewsFeed({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => NewsFeed)
  async updateNewsFeed(
    @graphql.Args() args: UpdateNewsFeedArgs
  ): Promise<NewsFeed | null> {
    try {
      return await this.service.updateNewsFeed({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewsFeed)
  async deleteNewsFeed(
    @graphql.Args() args: DeleteNewsFeedArgs
  ): Promise<NewsFeed | null> {
    try {
      return await this.service.deleteNewsFeed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
