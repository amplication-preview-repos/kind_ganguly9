/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NewsFeed as PrismaNewsFeed } from "@prisma/client";

export class NewsFeedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NewsFeedCountArgs, "select">): Promise<number> {
    return this.prisma.newsFeed.count(args);
  }

  async newsFeeds(
    args: Prisma.NewsFeedFindManyArgs
  ): Promise<PrismaNewsFeed[]> {
    return this.prisma.newsFeed.findMany(args);
  }
  async newsFeed(
    args: Prisma.NewsFeedFindUniqueArgs
  ): Promise<PrismaNewsFeed | null> {
    return this.prisma.newsFeed.findUnique(args);
  }
  async createNewsFeed(
    args: Prisma.NewsFeedCreateArgs
  ): Promise<PrismaNewsFeed> {
    return this.prisma.newsFeed.create(args);
  }
  async updateNewsFeed(
    args: Prisma.NewsFeedUpdateArgs
  ): Promise<PrismaNewsFeed> {
    return this.prisma.newsFeed.update(args);
  }
  async deleteNewsFeed(
    args: Prisma.NewsFeedDeleteArgs
  ): Promise<PrismaNewsFeed> {
    return this.prisma.newsFeed.delete(args);
  }
}
