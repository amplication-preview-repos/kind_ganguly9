/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewsFeedService } from "../newsFeed.service";
import { NewsFeedCreateInput } from "./NewsFeedCreateInput";
import { NewsFeed } from "./NewsFeed";
import { Post } from "../../post/base/Post";
import { NewsFeedFindManyArgs } from "./NewsFeedFindManyArgs";
import { NewsFeedWhereUniqueInput } from "./NewsFeedWhereUniqueInput";
import { NewsFeedUpdateInput } from "./NewsFeedUpdateInput";

export class NewsFeedControllerBase {
  constructor(protected readonly service: NewsFeedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewsFeed })
  async createNewsFeed(
    @common.Body() data: NewsFeedCreateInput
  ): Promise<NewsFeed> {
    return await this.service.createNewsFeed({
      data: data,
      select: {
        comments: true,
        contentSuggestions: true,
        createdAt: true,
        friendActivities: true,
        id: true,
        likedPosts: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewsFeed] })
  @ApiNestedQuery(NewsFeedFindManyArgs)
  async newsFeeds(@common.Req() request: Request): Promise<NewsFeed[]> {
    const args = plainToClass(NewsFeedFindManyArgs, request.query);
    return this.service.newsFeeds({
      ...args,
      select: {
        comments: true,
        contentSuggestions: true,
        createdAt: true,
        friendActivities: true,
        id: true,
        likedPosts: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewsFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newsFeed(
    @common.Param() params: NewsFeedWhereUniqueInput
  ): Promise<NewsFeed | null> {
    const result = await this.service.newsFeed({
      where: params,
      select: {
        comments: true,
        contentSuggestions: true,
        createdAt: true,
        friendActivities: true,
        id: true,
        likedPosts: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewsFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNewsFeed(
    @common.Param() params: NewsFeedWhereUniqueInput,
    @common.Body() data: NewsFeedUpdateInput
  ): Promise<NewsFeed | null> {
    try {
      return await this.service.updateNewsFeed({
        where: params,
        data: data,
        select: {
          comments: true,
          contentSuggestions: true,
          createdAt: true,
          friendActivities: true,
          id: true,
          likedPosts: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewsFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewsFeed(
    @common.Param() params: NewsFeedWhereUniqueInput
  ): Promise<NewsFeed | null> {
    try {
      return await this.service.deleteNewsFeed({
        where: params,
        select: {
          comments: true,
          contentSuggestions: true,
          createdAt: true,
          friendActivities: true,
          id: true,
          likedPosts: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
