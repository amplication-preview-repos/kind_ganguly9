/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MarketplaceListingService } from "../marketplaceListing.service";
import { MarketplaceListingCreateInput } from "./MarketplaceListingCreateInput";
import { MarketplaceListing } from "./MarketplaceListing";
import { Post } from "../../post/base/Post";
import { MarketplaceListingFindManyArgs } from "./MarketplaceListingFindManyArgs";
import { MarketplaceListingWhereUniqueInput } from "./MarketplaceListingWhereUniqueInput";
import { MarketplaceListingUpdateInput } from "./MarketplaceListingUpdateInput";

export class MarketplaceListingControllerBase {
  constructor(protected readonly service: MarketplaceListingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MarketplaceListing })
  async createMarketplaceListing(
    @common.Body() data: MarketplaceListingCreateInput
  ): Promise<MarketplaceListing> {
    return await this.service.createMarketplaceListing({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        images: true,
        paymentDetails: true,
        price: true,
        seller: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MarketplaceListing] })
  @ApiNestedQuery(MarketplaceListingFindManyArgs)
  async marketplaceListings(
    @common.Req() request: Request
  ): Promise<MarketplaceListing[]> {
    const args = plainToClass(MarketplaceListingFindManyArgs, request.query);
    return this.service.marketplaceListings({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        images: true,
        paymentDetails: true,
        price: true,
        seller: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MarketplaceListing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async marketplaceListing(
    @common.Param() params: MarketplaceListingWhereUniqueInput
  ): Promise<MarketplaceListing | null> {
    const result = await this.service.marketplaceListing({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        images: true,
        paymentDetails: true,
        price: true,
        seller: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MarketplaceListing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMarketplaceListing(
    @common.Param() params: MarketplaceListingWhereUniqueInput,
    @common.Body() data: MarketplaceListingUpdateInput
  ): Promise<MarketplaceListing | null> {
    try {
      return await this.service.updateMarketplaceListing({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          images: true,
          paymentDetails: true,
          price: true,
          seller: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MarketplaceListing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMarketplaceListing(
    @common.Param() params: MarketplaceListingWhereUniqueInput
  ): Promise<MarketplaceListing | null> {
    try {
      return await this.service.deleteMarketplaceListing({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          images: true,
          paymentDetails: true,
          price: true,
          seller: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
