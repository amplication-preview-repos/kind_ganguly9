/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MarketplaceListing } from "./MarketplaceListing";
import { MarketplaceListingCountArgs } from "./MarketplaceListingCountArgs";
import { MarketplaceListingFindManyArgs } from "./MarketplaceListingFindManyArgs";
import { MarketplaceListingFindUniqueArgs } from "./MarketplaceListingFindUniqueArgs";
import { CreateMarketplaceListingArgs } from "./CreateMarketplaceListingArgs";
import { UpdateMarketplaceListingArgs } from "./UpdateMarketplaceListingArgs";
import { DeleteMarketplaceListingArgs } from "./DeleteMarketplaceListingArgs";
import { MarketplaceListingService } from "../marketplaceListing.service";
@graphql.Resolver(() => MarketplaceListing)
export class MarketplaceListingResolverBase {
  constructor(protected readonly service: MarketplaceListingService) {}

  async _marketplaceListingsMeta(
    @graphql.Args() args: MarketplaceListingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MarketplaceListing])
  async marketplaceListings(
    @graphql.Args() args: MarketplaceListingFindManyArgs
  ): Promise<MarketplaceListing[]> {
    return this.service.marketplaceListings(args);
  }

  @graphql.Query(() => MarketplaceListing, { nullable: true })
  async marketplaceListing(
    @graphql.Args() args: MarketplaceListingFindUniqueArgs
  ): Promise<MarketplaceListing | null> {
    const result = await this.service.marketplaceListing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MarketplaceListing)
  async createMarketplaceListing(
    @graphql.Args() args: CreateMarketplaceListingArgs
  ): Promise<MarketplaceListing> {
    return await this.service.createMarketplaceListing({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MarketplaceListing)
  async updateMarketplaceListing(
    @graphql.Args() args: UpdateMarketplaceListingArgs
  ): Promise<MarketplaceListing | null> {
    try {
      return await this.service.updateMarketplaceListing({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarketplaceListing)
  async deleteMarketplaceListing(
    @graphql.Args() args: DeleteMarketplaceListingArgs
  ): Promise<MarketplaceListing | null> {
    try {
      return await this.service.deleteMarketplaceListing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
